plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk config.compileSdk
    defaultConfig {
        minSdk config.minSdk
        targetSdk config.targetSdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
    flavorDimensions 'environment'
    productFlavors {
        devInternal {
            dimension 'environment'
        }
        dev {
            dimension 'environment'
        }
        qa {
            dimension 'environment'
        }
        staging {
            dimension 'environment'
        }
        prod {
            dimension 'environment'
        }
    }
    buildTypes {
        debug {
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name == "release" && !names.contains("prod")) {
            setIgnore(true)
        }
    }
}

dependencies {
    implementation project(path: ':core:common')
    implementation project(path: ':core:database')
    implementation project(path: ':core:datastore')
    implementation project(path: ':core:network')
    // jetpack: architecture
    implementation "androidx.paging:paging-runtime-ktx:$architecture.paging"
    // dependency injection
    implementation "com.google.dagger:hilt-android:$architecture.hilt"
    kapt "com.google.dagger:hilt-compiler:$architecture.hilt"
    // jetbrains: kotlinx
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:$kotlinx.datetime"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx.coroutinesAndroid"
    // Firebase
    implementation platform("com.google.firebase:firebase-bom:$versions.firebase")
    implementation('com.google.firebase:firebase-auth-ktx') {
        exclude module: "play-services-safetynet"
    }
    // Google Play Billing Library
    implementation "com.android.billingclient:billing-ktx:$kotlinx.billing"
    // jetpack: foundation
    testImplementation "junit:junit:$foundation.junit"
    testImplementation "com.google.truth:truth:$foundation.truth"
    testImplementation "androidx.arch.core:core-testing:$foundation.coreTesting"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$foundation.kotlinxCoroutinesTest"
    testImplementation "org.mockito:mockito-core:$foundation.mockitoCore"
    testImplementation "org.mockito:mockito-inline:$foundation.mockitoInline"
    testImplementation "io.mockk:mockk:$foundation.mockk"
    androidTestImplementation "androidx.test.ext:junit:$foundation.androidJUnit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$foundation.androidEspresso"
}
