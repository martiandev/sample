plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk config.compileSdk
    defaultConfig {
        minSdk config.minSdk
        targetSdk config.targetSdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }
    flavorDimensions 'environment'
    productFlavors {
        devInternal {
            dimension 'environment'
        }
        dev {
            dimension 'environment'
        }
        qa {
            dimension 'environment'
        }
        staging {
            dimension 'environment'
        }
        prod {
            dimension 'environment'
        }
    }
    buildTypes {
        debug {
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name == "release" && !names.contains("prod")) {
            setIgnore(true)
        }
    }
}

dependencies {
    implementation project(path: ':core:common')
    // jetpack: architecture
    implementation "androidx.room:room-ktx:${architecture.room}"
    implementation "androidx.room:room-paging:${architecture.room}"
    kapt "androidx.room:room-compiler:${architecture.room}"
    // dependency injection
    implementation "com.google.dagger:hilt-android:$architecture.hilt"
    kapt "com.google.dagger:hilt-compiler:$architecture.hilt"
    // jetbrains: kotlinx
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:$kotlinx.datetime"

    // jetpack: foundation
    testImplementation "junit:junit:$foundation.junit"
    testImplementation "com.google.truth:truth:1.0.1"

    androidTestImplementation "androidx.test.ext:junit:1.1.3"
    androidTestImplementation "androidx.test.espresso:espresso-core:$foundation.androidEspresso"
    androidTestImplementation "com.google.truth:truth:1.0.1"
//    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.1'
    androidTestImplementation 'app.cash.turbine:turbine:0.9.0'


}